<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liujia12138.github.io</id>
    <title>AzhA</title>
    <updated>2020-10-19T08:22:51.264Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liujia12138.github.io"/>
    <link rel="self" href="https://liujia12138.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://liujia12138.github.io/images/avatar.png</logo>
    <icon>https://liujia12138.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, AzhA</rights>
    <entry>
        <title type="html"><![CDATA[前端实现文件流下载]]></title>
        <id>https://liujia12138.github.io/post/qian-duan-shi-xian-wen-jian-liu-xia-zai/</id>
        <link href="https://liujia12138.github.io/post/qian-duan-shi-xian-wen-jian-liu-xia-zai/">
        </link>
        <updated>2020-09-09T13:45:47.000Z</updated>
        <content type="html"><![CDATA[<p>1.封装通用请求函数，注意需要设置axios的responseType为blob</p>
<pre><code class="language-js">function download(url, params, filename) {
      let _this = this;
      _this
        .$axios({
          method: &quot;post&quot;,
          url: url,
          data: params,
          responseType: &quot;blob&quot;
        })
        .then(res =&gt; {
          let data = res.data;
          let fileReader = new FileReader();
            
        // 请求成功时服务端返回blob文件流，请求失败时会返回json格式的数据，两种格式需要单独处理
          fileReader.onload = function() {
            try {
              let jsonData = JSON.parse(this.result);
              if (jsonData.code) {
                return false;
              }
            } catch (err) {
              // 解析成对象失败，说明是正常的文件流
              let time = Date.now();
              downLoadXls(data, `${filename}.xlsx`);
            }
          };
          fileReader.readAsText(data);
        });
    }
</code></pre>
<p>2.处理文件流</p>
<pre><code class="language-js"> function downLoadXls(data, filename) {
  //接收的data是blob，若接收的是文件流，需要转化一下
  if (typeof window.chrome !== &quot;undefined&quot;) {
    // Chrome version
    var link = document.createElement(&quot;a&quot;);
    link.href = window.URL.createObjectURL(data);
    link.download = filename;
    link.click();
  } else if (typeof window.navigator.msSaveBlob !== &quot;undefined&quot;) {
    // IE
    var blob = new Blob([data], {
      type: &quot;application/force-download&quot;
    });
    window.navigator.msSaveBlob(blob, filename);
  } else {
    // Firefox
    var file = new File([data], filename, {
      type: &quot;application/force-download&quot;
    });
    // window.open(URL.createObjectURL(file));
  }
}
</code></pre>
<pre><code></code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue.$nextTick]]></title>
        <id>https://liujia12138.github.io/post/vuedollarnexttick/</id>
        <link href="https://liujia12138.github.io/post/vuedollarnexttick/">
        </link>
        <updated>2020-09-01T11:55:12.000Z</updated>
        <content type="html"><![CDATA[<p>定义：在下次dom更新循环结束之后执行延迟回调。<br>
理解：可以在这个方法中获取更新后的dom。</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;button ref=&quot;btn&quot; @click=&quot;add&quot;&gt;count: {{count}}&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
    data(){
        return {
            count: 0,
        }
    },
    methods:{
        add(){
            this.count ++;
            console.log(this.count, this.$refs.btn.innerText);// 1 &quot;count: 0&quot;
            
            this.$nextTick(()=&gt;{
                console.log(this.$refs.btn.innerText)// count: 1
            })
        }
    }
}
&lt;/script&gt;
</code></pre>
<p>上面例子中可以看到，更新count之后立即打印dom中的内容，是更新之前的，而nextTick中可以获取到更新后的dom。</p>
<p>原理：<br>
vue是异步执行dom更新的，一旦检测到数据变化，vue就会开启一个队列，然后把在同一事件循环中观察到数据变化的watcher推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效去掉重复数据造成的不必要的计算和dom操作，比如</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div&gt;{{count}}&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
export default{
    data(){
        return {
            count: 0
        }
    },
    created(){
        for(let i = 0; i &lt; 10000; i++){
            this.count ++
        }
    }
}
&lt;/script&gt;
</code></pre>
<p>上面例子中，created时count会执行10000次++操作，每次++都会依次触发 setter-dep-watcher-update-patch，如果没有异步更新视图，那么每一次++操作都会更新dom，非常消耗性能。<br>
所以vue实现了一个queue队列，在下一个事件循环时，会清空队列，并且更新dom。同时，有用相同id的watcher不会被重复添加到队列中，所以不会执行10000次watcher的count</p>
<p>使用场景：<br>
需要操作因数据而改变的dom。</p>
<p>实现下图的对话窗口页时，因为无法提前知道接口返回html片段内容的高度，所以需要在消息列表更新dom之后，根据高度判断是否需要折叠和显示折叠按钮，这时就可以用到vue.nextTick<br>
<img src="https://i.bmp.ovh/imgs/2020/08/26cdf0671fa966c6.png" alt="image" loading="lazy"></p>
<pre><code class="language-js">this.$nextTick(()=&gt;{
    let lastIndex = this.QAlist.length / 2 - 1;
    let par_msg = document.getElementsByClassName(&quot;service-chat-content&quot;)[
        this.QAlist.length
    ];
    let height = par_msg.getElementsByClassName(&quot;msg-content&quot;)[0]
        .offsetHeight;
    if (height &gt; 400) {
        par_msg.classList.add(&quot;collapse&quot;);
        let open = document.createElement(&quot;DIV&quot;);
        open.innerText = &quot;展开&quot;;
        open.classList.add(&quot;open&quot;);
        open.addEventListener(&quot;click&quot;, e =&gt; {
          if (open.innerText === &quot;展开&quot;) {
            open.innerText = &quot;收起&quot;;
            par_msg.style.height = &quot;auto&quot;;
          } else {
            open.innerText = &quot;展开&quot;;
            par_msg.style.height = &quot;400px&quot;;
          }
        });
        par_msg.appendChild(open);
      }
    }
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[contenteditable实现文本框]]></title>
        <id>https://liujia12138.github.io/post/contenteditable-shi-xian-wen-ben-kuang/</id>
        <link href="https://liujia12138.github.io/post/contenteditable-shi-xian-wen-ben-kuang/">
        </link>
        <updated>2020-08-24T11:46:24.000Z</updated>
        <content type="html"><![CDATA[<p>contenteditable是html5新增的属性，它规定了是否可以编辑元素的内容。</p>
<p><code>&lt;p contenteditable=&quot;true&quot;&gt;这是一个可编辑的p标签&lt;/p&gt;</code></p>
<ol>
<li>实现placeholder<br>
给标签添加placeholder属性，然后通过css控制placeholder的显示和隐藏<br>
<code>&lt;p contenteditable=&quot;true&quot; placeholder=&quot;请输入...&quot;&gt;&lt;/p&gt;</code><pre><code class="language-css">    p[contenteditable]:empty:not(:focus):before{
        content: attr(placeholder);
        color: #000;
    }
</code></pre>
</li>
<li></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue项目中使用jest进行单元测试]]></title>
        <id>https://liujia12138.github.io/post/vue-xiang-mu-zhong-shi-yong-jest-jin-xing-dan-yuan-ce-shi/</id>
        <link href="https://liujia12138.github.io/post/vue-xiang-mu-zhong-shi-yong-jest-jin-xing-dan-yuan-ce-shi/">
        </link>
        <updated>2020-07-12T06:51:50.000Z</updated>
        <content type="html"><![CDATA[<h6 id="1vue-cli3创建项目选择配置">1.vue-cli3创建项目，选择配置</h6>
<p>选中倒数第二项，支持单元测试<br>
<img src="https://s1.ax1x.com/2020/06/15/N9L6UK.png" alt="image" loading="lazy"></p>
<p>单元测试类型：选择jest<br>
<img src="https://s1.ax1x.com/2020/06/15/N9LIbt.png" alt="image" loading="lazy"></p>
<p>回车，等待生成项目</p>
<h6 id="2项目装好之后进入项目根目录">2.项目装好之后，进入项目根目录</h6>
<p>选择了单元测试的项目会多一个tests/unit目录，在这个目录内我们可以对组件进行测试<br>
<img src="https://s1.ax1x.com/2020/06/15/N9OTy9.png" alt="image" loading="lazy"></p>
<p>写好测试的js文件之后，运行yarn test:unit 就可以测试了<br>
<img src="https://s1.ax1x.com/2020/06/15/N9Xg6H.png" alt="image" loading="lazy"></p>
<h6 id="3jest的配置">3.jest的配置</h6>
<p>在package.json 中</p>
<pre><code class="language-json">&quot;jest&quot;: {
    &quot;preset&quot;: &quot;@vue/cli-plugin-unit-jest&quot;,
    &quot;moduleFileExtensions&quot;: [
      &quot;js&quot;,
      &quot;jsx&quot;,
      &quot;json&quot;,
      &quot;vue&quot;
    ],
    &quot;transform&quot;: {
      &quot;^.+\\.vue$&quot;: &quot;vue-jest&quot;,
      &quot;.+\\.(css|styl|less|sass|scss|svg|png|jpg|ttf|woff|woff2)$&quot;: &quot;jest-transform-stub&quot;,
      &quot;^.+\\.jsx?$&quot;: &quot;babel-jest&quot;
    },
    &quot;moduleNameMapper&quot;: {
      &quot;^@/(.*)$&quot;: &quot;&lt;rootDir&gt;/src/$1&quot;
    },
    &quot;snapshotSerializers&quot;: [
      &quot;jest-serializer-vue&quot;
    ],
    &quot;testMatch&quot;: [
      &quot;**/tests/unit/**/*.spec.(js|jsx|ts|tsx)|**/__tests__/*.(js|jsx|ts|tsx)&quot;
    ],
    &quot;testURL&quot;: &quot;http://localhost/&quot;,
    &quot;collectCoverage&quot;: true,
    &quot;collectCoverageFrom&quot;: [&quot;**/src/**.{js,vue}&quot;, &quot;!**/node_modules/**&quot;, &quot;!**src/main.js**&quot;, &quot;!**src/router.js**&quot;]
  }
</code></pre>
<h6 id="4测试结果">4.测试结果</h6>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/06/15/NCSJsg.png" alt="image" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript的隐式类型转换]]></title>
        <id>https://liujia12138.github.io/post/javascript-de-yin-shi-lei-xing-zhuan-huan/</id>
        <link href="https://liujia12138.github.io/post/javascript-de-yin-shi-lei-xing-zhuan-huan/">
        </link>
        <updated>2020-05-14T13:12:03.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>隐式转换规则</li>
</ol>
<ul>
<li>转成string类型： + （字符串拼接符）</li>
<li>转成number类型：++、--、+、-、*、/、%、&lt;、&gt;、&lt;=、&gt;=、!= 、== 、!== 、===</li>
<li>转成boolean类型：!（逻辑非运算符）</li>
</ul>
<ol>
<li>
<p>字符串连接符+：只要+两边有一边是字符串，会吧其他数据类型调用String()方法转换成字符串然后拼接</p>
</li>
<li>
<p>算数运算符+：+两边都是数字，会把其他数据类型调用Number()方法转换成数字然后进行假发运算</p>
</li>
<li>
<p>关系运算符：会把其他数据类型转换成number之后再作比较：</p>
</li>
</ol>
<ul>
<li>
<p>1.当关系运算符两边有一边是字符串的时候，会把字符串转换成number然后比较，比如<code>'a' &gt; 10</code>返回false，<code>'a'&lt;10</code>也返回false，因为Number('a')=NaN</p>
</li>
<li>
<p>2.a. 当关系运算符两边都是字符串的时候，会根据unicode编码来判断，<code>'2' &gt; '10'</code>返回true，因为'2'.charCodeAt()=50, '10'.chaeCodeAt()=49（默认返回第一个字符的编码，如果想要查询第二个字符可以传参下标）； b. 多个字符从左向右依次比较；</p>
</li>
<li>
<p>3.特殊情况，如果数据类型是undefined或者null，得出固定结果</p>
</li>
<li>
<p>4.特殊情况，NaN和任何数据比较都是false，包括NaN；</p>
</li>
<li>
<p>5.复杂数据类型：在隐式转换时会先转成string，然后再转成Number<br>
<img src="http://p9.pstatp.com/large/pgc-image/1538025621414c490c46b28" alt="image" loading="lazy"></p>
</li>
<li>
<ul>
<li>a.先使用valueOf()方法获取原始值，如果原始值不是number类型，则使用toString()方法转成string；</li>
</ul>
</li>
<li>
<ul>
<li>b.再将string转成number（unicode码）运算</li>
</ul>
</li>
</ul>
<pre><code class="language-js">console.log([1, 2] == '1,2');//true, 先获取数组的原始值，然后转成string，然后通过左右两边的字符串的unicode编码运算
console.log([1, 2].valueOf());//[1, 2]
console.log([1, 2].valueOf().toString());//'1,2'

var a = {};
console.log(a == &quot;[object Object]&quot;);//true
console.log(a.valueOf().toString());//&quot;[object Object]&quot;

//声明一个变量a，使下面表达式打印1
var a = {
    i: 1,//声明一个属性i
    valueOf: function(){
        return a.i++;//每调用一次valueOf，让自增1，并且返回i的值
    }
}
if(a == 1 &amp;&amp; a ==2 &amp;&amp; a == 3){
    console.log(1)
}

</code></pre>
<ul>
<li>
<p>6.逻辑非隐式转换与关系运算符隐式转换<br>
**注意：**空数组的toString()方法会得到一个空字符串，而空对象的toString()方法会得到字符串<code>[object Object]</code></p>
</li>
<li>
<ul>
<li>a.关系运算符：将其他数据类型转成number</li>
</ul>
</li>
<li>
<ul>
<li>b.逻辑非!：将其他数据类型使用Boolean()转成布尔值</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>1.null，undefined，空字符串，0，-0，NaN，false，document.all()转布尔值都会得到false，除此之外全都是true</li>
</ul>
</li>
</ul>
</li>
<li>
<ul>
<li>
<ul>
<li>2.逻辑非运算符优先级高于关系运算符，所以要先得到逻辑非运算结果在进行比较</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-js">console.log([] == 0)//true,
//原理：[].valueOf().toString() =&gt; &quot;&quot;, Number('') == 0

console.log(![] == 0);//true
//原理：逻辑非优先级高于关系运算符，空数组不在上面八种情况里，所以空数组转成布尔值应该是true，![] =&gt; false，false == 0成立

console.log({} == !{});//false
console.log({} == {});//false
//原理：
//1：本质上是{} 与 !{}这个逻辑非表达式比较，!{} =&gt; false，{}.valueOf().toString() =&gt; '[object Object]', 所以{} == !{}不成立，返回false
//2：引用数据类型存储在堆中，栈中存储的是引用地址，所以返回false

console.log([] == ![]);//true
console.log([] == []);//false
//原理：
//1：本质上是比较[]和![]逻辑非运算结果，[].valueOf().toString() =&gt; ''，Number('') =&gt; 0，![] =&gt; false, 0 == false成立，返回true；
//2：引用数据类型，false
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://liujia12138.github.io/post-images/1589461997727.jpeg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[移动端屏幕宽度自适应原理及实现]]></title>
        <id>https://liujia12138.github.io/post/yi-dong-duan-ping-mu-kuan-du-zi-gua-ying-yuan-li-ji-shi-xian/</id>
        <link href="https://liujia12138.github.io/post/yi-dong-duan-ping-mu-kuan-du-zi-gua-ying-yuan-li-ji-shi-xian/">
        </link>
        <updated>2020-05-09T05:10:42.000Z</updated>
        <content type="html"><![CDATA[<p>问题：当前市场上手机屏幕宽度不尽相同，常见有320px（ipone5）、375px（ipone678）等等，而为了在不同宽度的手机屏幕上良好现显示网页，让页面能够在不同尺寸的屏幕上完美适配<br>
https://www.cnblogs.com/chenyoumei/p/10510321.html<br>
原理：实现屏幕宽度自适应主要有两种方案</p>
<ol>
<li>使用百分比长度单位：vh、vw、rem、em、%<br>
优点：一套css代码就可以适配所有屏幕</li>
<li>使用固定长度单位px，再用js根据当前设备屏幕宽度计算比例，对网页进行缩放；<br>
优点：网页宽度恒定，便于计算</li>
</ol>
<p>实现：</p>
<ol>
<li>rem布局：通过动态修改html font-size的大小来实现，1rem==页面根元素html的font-size大小。<br>
首先需要在meta标签中设置禁止缩放：<br>
<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=0&quot;&gt;</code><br>
然后在页面加载是js动态获取当前视窗的宽度，计算得出相对于设计稿的比例，修改html的font-size大小</li>
</ol>
<pre><code class="language-js">function initFontSize(){
    var html = document.getElementsByTagName(&quot;html&quot;)[0];
    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    //假设视窗宽度为375px时，font-size为16px；
    html.style.fontSize = width/375 * 16 + 'px';
}
initFontSize();
//窗口大小变化时，重新计算font-size
window.onresize = ()=&gt;{ initFontSize() }
</code></pre>
<ol start="2">
<li>
<p>em：相对长度单位，相对于当前元素内字体的大小，如果当前元素没有设置字号，就找父元素的。</p>
</li>
<li>
<p>vw：相对于视窗的宽度，1vw为视窗宽度的1%。<br>
vw可以配合rem来实现屏幕自适应，移动端设计稿通常使用750px宽度，前端开发是通常使用375px的网页宽度，此时1vw=3.75px，4vh=15px；为了方便计算，可以设置html的字体大小为4vw；</p>
</li>
<li>
<p>%：单纯使用%无法确定元素高度，所以基本不用；</p>
</li>
<li>
<p>固定长度单位px，再使用js根据当前屏幕的宽度进行网页缩放</p>
</li>
</ol>
<ul>
<li>window.screen.width获取屏幕宽度</li>
<li>修改meta标签的initial-scale来改变页面初始缩放值</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css position的几个属性值和性能问题]]></title>
        <id>https://liujia12138.github.io/post/css-position-de-ji-ge-shu-xing-zhi-he-xing-neng-wen-ti/</id>
        <link href="https://liujia12138.github.io/post/css-position-de-ji-ge-shu-xing-zhi-he-xing-neng-wen-ti/">
        </link>
        <updated>2020-05-09T03:52:24.000Z</updated>
        <content type="html"><![CDATA[<h4 id="position的属性值">position的属性值</h4>
<ol>
<li>
<p>relative 相对定位<br>
相对该元素的正常位置进行定位<br>
元素不会脱离标准文档流<br>
可通过z-index定义层叠关系</p>
</li>
<li>
<p>absolute 绝对定位<br>
相对于static定位以外的第一个定位的父元素进行绝对定位，如果没有就相对于浏览器窗口定位<br>
元素脱离标准文档流<br>
可通过z-index定义层叠关系</p>
</li>
<li>
<p>fixed 固定定位<br>
相对与浏览器窗口进行定位<br>
脱离标准文档流<br>
可通过z-index定义层叠关系</p>
</li>
<li>
<p>static 静态定位<br>
元素正常在文档流中出现，top、bottom、left、right都不起作用</p>
</li>
</ol>
<h4 id="副作用">副作用</h4>
<p>实现动画效果的时候，如果用position，我们会发现动画的运行不是很流畅，因为top和left的改变会触发浏览器的回流和重绘，没改变一次位置就回重新渲染一次元素，造成整个动画的过程都在不断触发浏览器的重新渲染，非常影响性能</p>
<p>如果把position用transform来实现的话，就不会这样，transform位置的改变不会引起浏览器的回流和重绘，因为transform动画是由cpu控制的，支持硬件加速</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器不同标签页之间传值]]></title>
        <id>https://liujia12138.github.io/post/liu-lan-qi-bu-tong-biao-qian-ye-zhi-jian-chuan-zhi/</id>
        <link href="https://liujia12138.github.io/post/liu-lan-qi-bu-tong-biao-qian-ye-zhi-jian-chuan-zhi/">
        </link>
        <updated>2020-05-09T01:52:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-使用localstorage">1. 使用localStorage</h3>
<p>在一个标签页里面使用 localStorage.setItem(key,value)添加（修改、删除）内容；<br>
在另一个标签页里面监听 storage 事件。<br>
即可得到 localstorge 存储的值，实现不同标签页之间的通信。</p>
<h3 id="2使用setintervalcookie">2.使用setInterval+cookie</h3>
<p>将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js总结]]></title>
        <id>https://liujia12138.github.io/post/js-mian-shi-ti-zong-jie/</id>
        <link href="https://liujia12138.github.io/post/js-mian-shi-ti-zong-jie/">
        </link>
        <updated>2020-05-06T12:40:35.000Z</updated>
        <content type="html"><![CDATA[<p>1.事件冒泡和事件捕获<br>
事件捕获：事件从最不确定的元素向最准确的元素开始触发，即由外向内<br>
事件冒泡：事件从最准确的元素开始向最不准确的元素触发，即由内向外</p>
<p>addEventListener()有三个参数，第一个参数是绑定的事件类型；第二个是触发事件时执行的函数；第三个是 是否在捕获阶段触发事件，默认是false。</p>
<p>怎么阻止事件冒泡？event.stopPropagation()，vue项目中用stop修饰符</p>
<p>为什么要阻止事件冒泡？<br>
我们再多数情况下只使用冒泡监听。在一个列表页中，每一条信息中右下角会有一个删除按钮，同时点击这一条消息又会进入到详情页。当我们点击了删除按钮事件执行完毕之后，由于事件冒泡，会触发外层进入详情页的事件，这时就需要给删除按钮一个阻止事件传递的功能，点击删除按钮之后事件就会结束。</p>
<p>2.js获取url中的参数<br>
function getQueryString(name) {<br>
var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;);<br>
var r = window.location.search.substr(1).match(reg);<br>
if (r != null) return decodeURI(r[2]);<br>
return &quot;&quot;;<br>
}<br>
3.post请求能否跨域？<br>
post跨域问题本身是因为请求的域名和用于请求的机器域名不一致造成的，例如本地是127.0.0.1域名，请求的是192.168.50.11，在Network里面可以看到会接受到返回值，但是控制台会报请求头不一致的跨域问题，是因为浏览器对后台返给我结果进行了检测，发现两个环境域名不一致，所以解决的办法就是后台在接受到请求的时候，在返回头信息里面加入指定域名可访问或者所有域名都可以访问就可以，这样后台接收到请求之后的返回头里面就指定了对比的请求头，所以前端就能收到返回值了。</p>
<p>Access-Control-Allow-Headers: DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,userid,sign<br>
Access-Control-Allow-Methods: GET, POST, OPTIONS<br>
Access-Control-Allow-Origin: *<br>
//加上过滤方法之后的返回头信息，*代表允许所有的域名访问<br>
4.页面性能优化<br>
减少http请求，减少http请求次数是缩短响应时间的关键，捆绑文件，将多个脚本文件捆绑成一个，以此来减少http请求次数<br>
使用css精灵图<br>
减少事件绑定，使用事件委托<br>
引用外部的css和js，而不是写在html文件内，有利于浏览器对文件进行缓存<br>
合理设置 HTTP缓存　　缓存的力量是强大的，恰当的缓存设置可以大大的减少 HTTP请求。以有啊首页为例，当浏览器没有缓存的时候访问一共会发出 78个请求，共 600多 K数据 (如图 1.1)，而当第二次访问即浏览器已缓存之后访问则仅有 10个请求，共 20多 K数据 (如图 1.2)。 (这里需要说明的是，如果直接 F5刷新页面的话效果是不一样的，这种情况下请求数还是一样，不过被缓存资源的请求服务器是 304响应，只有 Header没有Body ，可以节省带宽 )　　怎样才算合理设置 ?原则很简单，能缓存越多越好，能缓存越久越好。例如，很少变化的图片资源可以直接通过 HTTP Header中的Expires设置一个很长的过期头 ;变化不频繁而又可能会变的资源可以使用 Last-Modifed来做请求验证。尽可能的让资源能够在缓存中待得更久。<br>
减少dom操作<br>
5.原生ajax<br>
var xhr = new XMLHttpRequest();<br>
xhr.onreadystatechange= function(){<br>
if(xhr.readyState == 4 &amp;&amp; xhr.status == 200){<br>
console.log(xhr.responseText)<br>
}<br>
}<br>
//发送get请求时，参数直接拼接在url上<br>
xhr.open(&quot;get&quot;, &quot;url?param1=val1&amp;param2=val2&quot;);<br>
//发送post请求时，参数用send函数发送，并且需要设置请求头<br>
xhr.open(&quot;post&quot;, &quot;url&quot;);<br>
xhr.setRequestHeader('Content-Type', &quot;application/x-www-form-urlencoded&quot;)<br>
xhr.send(&quot;name=value&amp;age=12&quot;)<br>
6.js判断数据类型的方法<br>
typeof 只能对基本数据类型做出准确的判断，引用数据类型都会返回object，typeof的返回结果有：number、string、undefined、boolean、object、function六种，都是小写<br>
instanceof：判断对象和构造函数在原型链上是否有关联，有返回true，无返回false，基本数据类型无效<br>
constructor：查看对象对应的构造函数，当我们写一个构造函数的时候程序会自动添加；构造函数名.prototype.constructor=构造函数名；<br>
str.constructor == String;//true<br>
object.prototype.toString.call: 不管是什么类型都能检测出来<br>
7. call和apply,bind的区别？<br>
call、apply、bind的作用是改变函数运行时this的指向</p>
<p>2.js垃圾回收与内存泄漏？<br>
浏览器的JavaScript具有自动垃圾回收机制（GC），即执行环境会负责管理代码执行过程中的内存。原理是：垃圾收集器会定期找出那些不在继续使用的变量，然后将其内存进行释放。</p>
<p>垃圾回收机制标记无用变量的策略有两种：标记清除和引用计数。标记清除较为常用。</p>
<p>不在使用的变量就是生命周期结束的变量，只能是局部变量，因为全局变量的生命周期直到浏览器卸载页面是才会结束。局部变量只在函数的执行过程中存在，在这个过程中会在栈或者堆上为这个局部变量分配相应的空间用来存储他们的值，直到函数结束。但是闭包中由于你不函数的原因，外部函数不能算是结束。</p>
<p>function fn1(){<br>
var obj = {name: &quot;tom&quot;}<br>
}<br>
function fn2(){<br>
var obj = {name:&quot;tom&quot;};<br>
return obj;<br>
}<br>
var a = fn1();<br>
var b = fn2();<br>
上面的例子中，只有fn1中的obj会在调用结束后被垃圾回收机制回收，fn2中的obj不会，因为在fn2的调用过程中，返回的变量被变量b引用，所以不会改块内存不会被释放。</p>
<p>1.标记清除：当变量进入环境时，就将这个变量标记为“进入环境”，当变量离开环境时，将它标记为“离开环境”</p>
<p>function test(){<br>
var a = 10 ;       // 被标记 ，进入环境<br>
var b = 20 ;       // 被标记 ，进入环境<br>
}<br>
test();            // 执行完毕 之后 a、b又被标离开环境，被回收。<br>
2.引用计数：跟踪每个值被引用的次数，引用一次就将次数加1，如果包含这个值的变量又被赋了另外一个值，引用次数就减1，当引用次数为0时，垃圾回收机制就会释放该值所占用的内存。</p>
<p>function test() {<br>
var a = {};    // a指向对象的引用次数为1<br>
var b = a;     // a指向对象的引用次数加1，为2<br>
var c = a;     // a指向对象的引用次数再加1，为3<br>
var b = {};    // a指向对象的引用次数减1，为2<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css实现宽高比]]></title>
        <id>https://liujia12138.github.io/post/css-shi-xian-kuan-gao-bi/</id>
        <link href="https://liujia12138.github.io/post/css-shi-xian-kuan-gao-bi/">
        </link>
        <updated>2020-05-06T12:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>垂直方向的padding+calc<br>
借助padding-top或者padding-bottom的百分比值来实现容器的宽高比，padding的百分比值是根据外层容器的宽度计算的，我们只需要设置好外层容器的宽度，并将容器的高度设置为0，容器所有子元素都设置绝对定位。</p>
<!-- html如下 -->
<div class='container'>
    <div class='aspectration' data-ratio='4:3'>
        <div class='content'></div>
    </div>
</div>
.container{
    width: 300px;
}
.aspectration{
    width: 100%;
    position: relative;
    height: 0;
}
.aspectration[data-ratio='4:3']{
    padding-top: calc(100% / 4 * 3);
}
.aspectration>*{
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
}]]></content>
    </entry>
</feed>